"use strict";(self.webpackChunkgoxlr_utiltiy_docs=self.webpackChunkgoxlr_utiltiy_docs||[]).push([[911],{4137:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>h});var n=i(7294);function l(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){l(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,l=function(e,t){if(null==e)return{};var i,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(l[i]=e[i]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(l[i]=e[i])}return l}var u=n.createContext({}),d=function(e){var t=n.useContext(u),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=d(e.components);return n.createElement(u.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=d(i),m=l,h=s["".concat(u,".").concat(m)]||s[m]||c[m]||r;return i?n.createElement(h,a(a({ref:t},p),{},{components:i})):n.createElement(h,a({ref:t},p))}));function h(e,t){var i=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=i.length,a=new Array(r);a[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[s]="string"==typeof e?e:l,a[1]=o;for(var d=2;d<r;d++)a[d]=i[d];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},6163:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var n=i(7462),l=(i(7294),i(4137));const r={id:"compilation-guide",title:"Compilation Guide",sidebar_position:1},a="Compilation Guide",o={unversionedId:"development/compilation-guide",id:"development/compilation-guide",title:"Compilation Guide",description:"What you'll need",source:"@site/docs/development/compilation-guide.md",sourceDirName:"development",slug:"/development/compilation-guide",permalink:"/goxlr-utility-docs/docs/development/compilation-guide",draft:!1,editUrl:"https://goxlr-on-linux.github.io/goxlr-utility-docs/docs/development/compilation-guide.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"compilation-guide",title:"Compilation Guide",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Development",permalink:"/goxlr-utility-docs/docs/category/development"},next:{title:"API",permalink:"/goxlr-utility-docs/docs/category/api"}},u={},d=[{value:"What you&#39;ll need",id:"what-youll-need",level:2},{value:"TTS Feature",id:"tts-feature",level:3},{value:"Getting the Code",id:"getting-the-code",level:2},{value:"Building",id:"building",level:2},{value:"Linux Speedrun",id:"linux-speedrun",level:3},{value:"Building by Hand",id:"building-by-hand",level:3},{value:"Binaries",id:"binaries",level:3},{value:"Done.",id:"done",level:3}],p={toc:d},s="wrapper";function c(e){let{components:t,...i}=e;return(0,l.kt)(s,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"compilation-guide"},"Compilation Guide"),(0,l.kt)("h2",{id:"what-youll-need"},"What you'll need"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A Git Client (like pure ",(0,l.kt)("a",{parentName:"li",href:"https://git-scm.com/"},"Git")," or ",(0,l.kt)("a",{parentName:"li",href:"https://desktop.github.com/"},"GitHub Desktop"),")"),(0,l.kt)("li",{parentName:"ul"},"Install ",(0,l.kt)("a",{parentName:"li",href:"https://rustup.rs/"},"Rust")),(0,l.kt)("li",{parentName:"ul"},"For Linux:",(0,l.kt)("br",null),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Debian: ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo apt-get install pkg-config libdbus-1-dev libpulse0"),(0,l.kt)("br",null)),(0,l.kt)("li",{parentName:"ul"},"Fedora: ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo dnf install pkgconf-pkg-config dbus-devel pulseaudio-libs"))))),(0,l.kt)("h3",{id:"tts-feature"},"TTS Feature"),(0,l.kt)("p",null,"The following packages will be needed if doing the 'Linux Speedrun' build,\nor if you require TTS capabilities inside the utility to report button presses."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Dependencies:",(0,l.kt)("br",null),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Debian: ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo apt-get install clang libspeechd-dev")),(0,l.kt)("li",{parentName:"ul"},"Fedora: ",(0,l.kt)("inlineCode",{parentName:"li"},"sudo dnf install clang speech-dispatcher-devel"))))),(0,l.kt)("h2",{id:"getting-the-code"},"Getting the Code"),(0,l.kt)("p",null,"Firstly, we need to get the code from GitHub so we can build it. This is relatively simple,\nfrom a command line run: ",(0,l.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/GoXLR-on-Linux/goxlr-utility.git")," then ",(0,l.kt)("inlineCode",{parentName:"p"},"cd goxlr-utility"),"."),(0,l.kt)("p",null,"If you require a specific feature or development branch (for example, the ",(0,l.kt)("inlineCode",{parentName:"p"},"dev-0.12.0")," branch), you can switch to it using ",(0,l.kt)("inlineCode",{parentName:"p"},"git checkout dev-0.12.0"),"."),(0,l.kt)("p",null,"If there have been new commits, and you need to update your source tree, simply run ",(0,l.kt)("inlineCode",{parentName:"p"},"git pull")," to update everything."),(0,l.kt)("h2",{id:"building"},"Building"),(0,l.kt)("h3",{id:"linux-speedrun"},"Linux Speedrun"),(0,l.kt)("p",null,"If you're simply building because you run a distribution where a package for the utility isn't available,\nor want to run closer to bleeding edge, there's a script available that will build the utility and install\nall the components into their correct system locations the same way a package would. Simply make sure you have\nthe TTS dependencies and from the ",(0,l.kt)("inlineCode",{parentName:"p"},"goxlr-utility")," source directory, run ",(0,l.kt)("inlineCode",{parentName:"p"},"ci/build-and-install.sh"),".\nYou'll be prompted for your password during this process while binaries, icons, and files are moved into the correct positions."),(0,l.kt)("h3",{id:"building-by-hand"},"Building by Hand"),(0,l.kt)("p",null,"Building by hand is relatively simple, you start off with a single command:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo build")),(0,l.kt)("p",null,"This will simply build the utility into the ",(0,l.kt)("inlineCode",{parentName:"p"},"target/debug")," directory. We can enhance the build in various ways:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Support the TTS feature, install the needed dependencies and add ",(0,l.kt)("inlineCode",{parentName:"li"},'--features "tts"')," to the build command"),(0,l.kt)("li",{parentName:"ul"},"Create optimised binaries, add ",(0,l.kt)("inlineCode",{parentName:"li"},"--release")," to the build command (Binaries are produced in ",(0,l.kt)("inlineCode",{parentName:"li"},"target/release"),")")),(0,l.kt)("p",null,"So for an optimised, TTS enabled release, you'd run:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'cargo build --features "tts" --release')),(0,l.kt)("p",null,"Once complete, you've got a build of the GoXLR Utility."),(0,l.kt)("h3",{id:"binaries"},"Binaries"),(0,l.kt)("p",null,"The utility creates several binaries, these can be found in either ",(0,l.kt)("inlineCode",{parentName:"p"},"target/debug")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"target/release")," depending\non the build method above. The binaries are (Under Windows, these will have a ",(0,l.kt)("inlineCode",{parentName:"p"},".exe")," extension):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"goxlr-daemon - The Utilities Core Binary"),(0,l.kt)("li",{parentName:"ul"},"goxlr-client - The CLI Client for the Utility"),(0,l.kt)("li",{parentName:"ul"},"goxlr-launcher - A Tool to lauch the UI, and if needed, the daemon (Used in App Menus)."),(0,l.kt)("li",{parentName:"ul"},"goxlr-defaults - A 'package' of default profiles, mic profiles, icons and presets"),(0,l.kt)("li",{parentName:"ul"},"goxlr-initialiser - ",(0,l.kt)("inlineCode",{parentName:"li"},"[DEPRECATED]")," A Tool to initialise the GoXLR for use"),(0,l.kt)("li",{parentName:"ul"},"goxlr-firmware - We don't talk about this.")),(0,l.kt)("p",null,"Regardless of your intent, with the exception of ",(0,l.kt)("inlineCode",{parentName:"p"},"goxlr-client")," you should keep ALL of these files together, as they often depend on each other to function."),(0,l.kt)("h3",{id:"done"},"Done."),(0,l.kt)("p",null,"If you get here, you should have a build of the utility you can use, have fun and enjoy!"))}c.isMDXComponent=!0}}]);