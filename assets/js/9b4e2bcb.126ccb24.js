"use strict";(self.webpackChunkgoxlr_utiltiy_docs=self.webpackChunkgoxlr_utiltiy_docs||[]).push([[3107],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(y,s(s({ref:t},p),{},{components:n})):r.createElement(y,s({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(7462),o=(n(7294),n(4137));const i={id:"unix-socket",title:"Unix Socket",sidebar_position:1},s="Unix Socket Example",a={unversionedId:"development/api/examples/unix-socket",id:"development/api/examples/unix-socket",title:"Unix Socket",description:".NET / C",source:"@site/docs/development/api/examples/unix-socket.md",sourceDirName:"development/api/examples",slug:"/development/api/examples/unix-socket",permalink:"/goxlr-utility-docs/docs/development/api/examples/unix-socket",draft:!1,editUrl:"https://goxlr-on-linux.github.io/goxlr-utility-docs/docs/development/api/examples/unix-socket.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"unix-socket",title:"Unix Socket",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/goxlr-utility-docs/docs/category/examples"},next:{title:"Named Pipe",permalink:"/goxlr-utility-docs/docs/development/api/examples/named-pipe"}},l={},c=[{value:".NET / C#",id:"net--c",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"unix-socket-example"},"Unix Socket Example"),(0,o.kt)("h2",{id:"net--c"},".NET / C#"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing System.Buffers.Binary;\nusing System.IO.Pipes;\nusing System.Diagnostics;\nusing System.Text;\n\nvar socket = new Socket(AddressFamily.Unix, SocketType.Stream, ProtocolType.Unspecified);\ntry {\n    // If we can\'t connect for 20ms, the daemon probably isn\'t running..\n    socket.Connect(new UnixDomainSocketEndPoint("/tmp/goxlr.socket"));\n} catch (Exception) {\n    Console.Error.WriteLine("Unable to connect to the GoXLR Pipe");\n    return;\n}\n\nvar networkStream = new NetworkStream(socket);\n\n// Create the Stream Handlers..\nvar reader = new BinaryReader(client);\nvar writer = new BinaryWriter(client);\n\n// This is the JSON Message as a String..\nvar message = "\\"GetStatus\\"";\n\n// Grab the Message Bytes, and the bytes length..\nvar bytes = Encoding.UTF8.GetBytes(message);\nvar len = BitConverter.GetBytes((Int32)bytes.Length);\n\n// If we\'re on a little endian system, we need to reverse the length to BigEndian\nif (BitConverter.IsLittleEndian) {\n    Array.Reverse(len);\n}\n\n// Write the Message.\nwriter.Write(len);\nwriter.Write(bytes);\n\n// Read the first 4 bytes (response length)\nvar response_length_bytes = reader.ReadBytes(4);\n\n// Again, LittleEndian check and change\nif (BitConverter.IsLittleEndian) {\n    Array.Reverse(response_length_bytes);\n}\nvar response_length = BitConverter.ToUInt32(response_length_bytes);\n\n// Read the Response Body..\nvar response_bytes = reader.ReadBytes((int)response_length);\nvar response_body = Encoding.UTF8.GetString(response_bytes);\n\nsocket.Close();\nnetworkStream.Close();\n\n// Output to Console (should be JSON)\nConsole.WriteLine(response_body);\n')))}u.isMDXComponent=!0}}]);