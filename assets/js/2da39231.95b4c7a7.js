"use strict";(self.webpackChunkgoxlr_utiltiy_docs=self.webpackChunkgoxlr_utiltiy_docs||[]).push([[5393],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const o={id:"unix-named",title:"Unix Socket/Named Pipe",sidebar_position:2},a="Unix Socket / Named Pipe",l={unversionedId:"development/api/unix-named",id:"development/api/unix-named",title:"Unix Socket/Named Pipe",description:"These should be your primary point of entry to the utility, even if you intend to use the HTTP channels for actual work.",source:"@site/docs/development/api/unix-named.md",sourceDirName:"development/api",slug:"/development/api/unix-named",permalink:"/goxlr-utility-docs/docs/development/api/unix-named",draft:!1,editUrl:"https://goxlr-on-linux.github.io/goxlr-utility-docs/docs/development/api/unix-named.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"unix-named",title:"Unix Socket/Named Pipe",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/goxlr-utility-docs/docs/development/api/getting-started"},next:{title:"Simple HTTP Request",permalink:"/goxlr-utility-docs/docs/development/api/simple-http"}},s={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"unix-socket--named-pipe"},"Unix Socket / Named Pipe"),(0,i.kt)("p",null,"These should be your primary point of entry to the utility, even if you intend to use the HTTP channels for actual work.\nThey will always be present, and active, so long as the GoXLR Utility is running.\nUsers can turn off the web server component of the Daemon, or change the port,\nbut this socket can be used to determine if that's the case."),(0,i.kt)("p",null,"The message send / receive format is relatively straight forward:",(0,i.kt)("br",null),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"[Message Length as unsigned 32bit BigEndian Integer][JSON Message]")),(0,i.kt)("p",null,"These sockets are simple send / receive, you send a request, you get a response in the same format.\nTo parse out the JSON response, you would read the length, then use that to read the message."),(0,i.kt)("p",null,"If you're writing in rust, you can utilize the ",(0,i.kt)("a",{parentName:"p",href:"https://crates.io/crates/interprocess"},"interprocess")," crate,\nalong with the utilities ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/GoXLR-on-Linux/goxlr-utility/tree/main/ipc"},"ipc")," crate to automatically handle connections and marshaling data.\nCheck out the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/GoXLR-on-Linux/goxlr-utility/blob/main/client/src/main.rs"},"goxlr-client")," for an example on how to do this."),(0,i.kt)("p",null,"If you're a C# / Other Language user, there's a VERY basic example on handling this socket available here:",(0,i.kt)("br",null)),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/goxlr-utility-docs/docs/development/api/examples/unix-socket"},"Unix-Socket"),": Used by Unix based systems like Linux or MacOS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/goxlr-utility-docs/docs/development/api/examples/named-pipe"},"Named-Pipe"),": Used by Windows.")),(0,i.kt)("p",null,"If your intent is to use the web based interfaces, you'd want to perform a GetStatus,\nwhich will return a json structure detailing the complete device status.\nIn order to get the Url, you need to extract it from the Json.",(0,i.kt)("br",null),"\nThe JsonPath should be: ",(0,i.kt)("inlineCode",{parentName:"p"},"/Status/config/http_settings"),", it includes the Bind Address, Port and whether its enabled."))}d.isMDXComponent=!0}}]);